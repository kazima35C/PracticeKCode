//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_InputSystem/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""42cfae65-1a3f-4fcf-aee6-a9644ae3d8d8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5d14d2a5-5f92-419d-aa50-7c0236471258"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchMode1"",
                    ""type"": ""Button"",
                    ""id"": ""8b4ba3a9-1e5f-414d-b276-eff668028e64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchMode2"",
                    ""type"": ""Button"",
                    ""id"": ""84e9183b-bc85-4671-8a53-718a5868d308"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchMode3"",
                    ""type"": ""Button"",
                    ""id"": ""f4fd3d75-b106-4f36-b8bf-333618a94162"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoystickMovement"",
                    ""type"": ""Value"",
                    ""id"": ""daee604a-c4dd-4868-9f07-35d921fa01fc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickRotation"",
                    ""type"": ""Value"",
                    ""id"": ""17cb206f-d4ea-476e-bd86-c919e2853cf5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ad890453-19ae-412b-916e-eb1f015e1962"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""756bacf3-bc3d-47cd-9078-a5141d194694"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d5b0a0cf-db04-4628-9594-5fe1176108c8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d4f9ae63-f754-4c4a-94f3-8c60e0f79d19"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d8d7dfb-bc4b-44eb-8635-550d74e9808b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b5483392-1346-451a-8de1-4f98f1732c65"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchMode1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e4c5846-956a-4c43-9de6-36274f7c7a2b"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchMode2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b2dc016-061b-4c49-8ece-4486ff33dd8a"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchMode3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4f40445-af2c-4d57-90e5-ac7710407a01"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c64ba17b-86b3-4eaa-8164-b417199917a9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls
        m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
        m_CharacterControls_Movement = m_CharacterControls.FindAction("Movement", throwIfNotFound: true);
        m_CharacterControls_SwitchMode1 = m_CharacterControls.FindAction("SwitchMode1", throwIfNotFound: true);
        m_CharacterControls_SwitchMode2 = m_CharacterControls.FindAction("SwitchMode2", throwIfNotFound: true);
        m_CharacterControls_SwitchMode3 = m_CharacterControls.FindAction("SwitchMode3", throwIfNotFound: true);
        m_CharacterControls_JoystickMovement = m_CharacterControls.FindAction("JoystickMovement", throwIfNotFound: true);
        m_CharacterControls_JoystickRotation = m_CharacterControls.FindAction("JoystickRotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls
    private readonly InputActionMap m_CharacterControls;
    private List<ICharacterControlsActions> m_CharacterControlsActionsCallbackInterfaces = new List<ICharacterControlsActions>();
    private readonly InputAction m_CharacterControls_Movement;
    private readonly InputAction m_CharacterControls_SwitchMode1;
    private readonly InputAction m_CharacterControls_SwitchMode2;
    private readonly InputAction m_CharacterControls_SwitchMode3;
    private readonly InputAction m_CharacterControls_JoystickMovement;
    private readonly InputAction m_CharacterControls_JoystickRotation;
    public struct CharacterControlsActions
    {
        private @Controller m_Wrapper;
        public CharacterControlsActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterControls_Movement;
        public InputAction @SwitchMode1 => m_Wrapper.m_CharacterControls_SwitchMode1;
        public InputAction @SwitchMode2 => m_Wrapper.m_CharacterControls_SwitchMode2;
        public InputAction @SwitchMode3 => m_Wrapper.m_CharacterControls_SwitchMode3;
        public InputAction @JoystickMovement => m_Wrapper.m_CharacterControls_JoystickMovement;
        public InputAction @JoystickRotation => m_Wrapper.m_CharacterControls_JoystickRotation;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @SwitchMode1.started += instance.OnSwitchMode1;
            @SwitchMode1.performed += instance.OnSwitchMode1;
            @SwitchMode1.canceled += instance.OnSwitchMode1;
            @SwitchMode2.started += instance.OnSwitchMode2;
            @SwitchMode2.performed += instance.OnSwitchMode2;
            @SwitchMode2.canceled += instance.OnSwitchMode2;
            @SwitchMode3.started += instance.OnSwitchMode3;
            @SwitchMode3.performed += instance.OnSwitchMode3;
            @SwitchMode3.canceled += instance.OnSwitchMode3;
            @JoystickMovement.started += instance.OnJoystickMovement;
            @JoystickMovement.performed += instance.OnJoystickMovement;
            @JoystickMovement.canceled += instance.OnJoystickMovement;
            @JoystickRotation.started += instance.OnJoystickRotation;
            @JoystickRotation.performed += instance.OnJoystickRotation;
            @JoystickRotation.canceled += instance.OnJoystickRotation;
        }

        private void UnregisterCallbacks(ICharacterControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @SwitchMode1.started -= instance.OnSwitchMode1;
            @SwitchMode1.performed -= instance.OnSwitchMode1;
            @SwitchMode1.canceled -= instance.OnSwitchMode1;
            @SwitchMode2.started -= instance.OnSwitchMode2;
            @SwitchMode2.performed -= instance.OnSwitchMode2;
            @SwitchMode2.canceled -= instance.OnSwitchMode2;
            @SwitchMode3.started -= instance.OnSwitchMode3;
            @SwitchMode3.performed -= instance.OnSwitchMode3;
            @SwitchMode3.canceled -= instance.OnSwitchMode3;
            @JoystickMovement.started -= instance.OnJoystickMovement;
            @JoystickMovement.performed -= instance.OnJoystickMovement;
            @JoystickMovement.canceled -= instance.OnJoystickMovement;
            @JoystickRotation.started -= instance.OnJoystickRotation;
            @JoystickRotation.performed -= instance.OnJoystickRotation;
            @JoystickRotation.canceled -= instance.OnJoystickRotation;
        }

        public void RemoveCallbacks(ICharacterControlsActions instance)
        {
            if (m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);
    public interface ICharacterControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSwitchMode1(InputAction.CallbackContext context);
        void OnSwitchMode2(InputAction.CallbackContext context);
        void OnSwitchMode3(InputAction.CallbackContext context);
        void OnJoystickMovement(InputAction.CallbackContext context);
        void OnJoystickRotation(InputAction.CallbackContext context);
    }
}
